from .base import API, Model
import numbers
{% if api.models | needs_enum %}
from enum import Enum, unique
{% endif %}


KEYWORDS = {{keywords | sort}}
{% for model in api.models | sort %}


class {{model.name}}(Model):
    {% for field in model.fields | sort %}
    {% if field.enum %}

    @unique
    class {{field.name | safe_name | capitalize}}(Enum):
        {% for value in field.enum | sort %}
        {{value | upper}} = "{{value}}"
        {% endfor %}

        def asdict(self):
            return self.name

    {% endif %}
    {% endfor %}

    def __init__({{model.fields | as_args}}, **kwargs):
        super().__init__()
        {# Escape the keywords and builtin functions #}
        kwargs = {k if k not in KEYWORDS else k + "_": v 
                  for k, v in kwargs.items()
                 }

        {% for field in model.fields | sort %}
        {% set name = field.name | safe_name %}
        {{name}} = kwargs.pop("{{name}}", {{name}})
        {% if name != field.name %}
        self.__pykeywords__["{{name}}"] = "{{field.name}}"
        {% endif %}
        {% if field.required %}
        if {{name}} is None:
            raise TypeError("Argument `{{name}}` is required but its value is None")
        {% endif %}
        {# First try to convert to the given type #}
        {# convert dict to a Model object #}
        {% if field.type | is_model(api.models) %}
        if isinstance({{name}}, dict):
            {{name}} = {{field.type}}(**{{name}})
        {% endif %}
        {# convert list to a list of Model object #}
        {% if field.type == "list" and field.items | is_model(api.models) %}
        if isinstance({{name}}, list):
            {{name}} = [e if isinstance(e, {{field.items}}) else {{field.items}}(**e) for e in {{name}}]
        {% endif %}
        {# convert dict to a dict with keys being Model objects #}
        {% if field.type == "dict" and field.items[1] | is_model(api.models) %}
        if isinstance({{name}}, dict):
            {{name}} = {k: v if isinstance(v, {{field.items[1]}}) else {{field.items[1]}}(**v) for k, v in {{name}}.items()}
        {% endif %}
        {# Bug: dates are declared as strings, but given as int in the json #}
        {% if field.type == "str" %}
        if type({{name}}) is int:
            {{name}} = str({{name}})
        {% endif %}
        {# Numbers are convertible #}
        {% if field.type in ("int", "float", "double") %}
        if isinstance({{name}}, numbers.Number):
            {{name}} = {{field.type}}({{name}})
        {% endif %}
        {# Handle enums #}
        {% if field.enum %}
        if isinstance({{name}}, str):
            {{name}} = {{model.name}}.{{name | safe_name | capitalize}}[{{name}}.upper()]
        {% endif %}
        {# Now check the type #}
        {# TODO: we should also check lists and dicts #}
        {% set check_type = model.name + "." + (name | capitalize) if field.enum else field.type %}
        if not (isinstance({{name}}, {{check_type}})) and {{name}} is not None:
            raise TypeError("Argument `{{name}}` is not of type `{{check_type}}` (%s)" % str(type({{name}})))
        self.{{name}} = {{name}}
        {% endfor %}
        self._extra_ = kwargs
{% endfor %}


class {{api.name}}(API):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
    {% for endpoint in api.endpoints | sort %}

    def {{endpoint.name}}({{endpoint.parameters | as_args}}):
        """
        {{endpoint.description}}

        ({{endpoint.method}} {{endpoint.path}})

        {% for p in endpoint.parameters | sort %}
        :param {{p.name}}: {{p.description}}
        {% set ptype = "list(" + p.items + ")" if p.type == "list" else p.type %}
        :type {{p.name}}: {{ptype}}
        {% endfor %}
        {% set rtype = "Nothing" if endpoint.return_.type == "void" else endpoint.return_.type %}
        {% set rtype = "list(" + endpoint.return_.items + ")" if rtype == "list" else rtype %}
        :rtype: {{rtype}}
        """

        {% for parameter in endpoint.parameters %}
        {% if not parameter.type %}
            if {{parameter.required}} and {{parameter.name}} is None:
                raise TypeError("Argument `{{parameter.name}}` is required but its value is None")
            if not (isinstance({{parameter.name}}, {{parameter.type}})):
                # Bug: dates are declared as strings, but given as int in the json
                if ({{parameter.type}} is str and type({{parameter.name}}) is not int)
                    raise TypeError("Argument `{{parameter.name}}` is not of type `{{parameter.type}}` (%s)" % 
                                    str(type({{parameter.name}})))
            self.{{parameter.name}} = {{parameter.name}}

        {% endif %}
        {% endfor %}
        path = "{{endpoint.path}}"
        {% for parameter in endpoint.parameters | sort %}
        {% if parameter.paramType == "path" %}
        path = path.replace("{" + "{{parameter.name}}" + "}", str({{parameter.name | safe_name}}))
        {% endif %}
        {% endfor %}

        {% set body = endpoint.parameters | body %}
        {% if body | length > 1 %}
        raise RuntimeError("Too much body argument")
        {% endif %}
        ret = self.do_request("{{endpoint.method}}",
                              path,
                              {{endpoint.parameters | query_args}},
                              {{body[0] or {} }},
                              {{endpoint.responses | errors_dict}})

        if ret is None:
            return None

        {% if endpoint.return_.type == "void" %}
        return ret
        {% elif endpoint.return_.type in ["float", "double", "str", "int"] %}
        return {{endpoint.return_.type}}(ret)
        {% elif endpoint.return_.type == "list" %}
        if not isinstance(ret, list):
            raise TypeError("Returned json is not a list (%s)" % (type(ret)))
        return [{{endpoint.return_.items}}(**r) for r in ret]
        {% else %}
        return {{endpoint.return_.type}}(**ret)
        {% endif %}

    {{endpoint | path_to_function}} = {{endpoint.name}}
    {% endfor %}
