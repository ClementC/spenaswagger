import requests
from urllib.parse import urljoin
import json
from textwrap import indent
import logging


logging.basicConfig(level=logging.WARNING, format='[%(levelname)s][%(name)s][%(asctime)s] %(message)s')



class API:
    class Error(Exception):
        def __init__(self, code, message=""):
            self.code = code
            self.message = message

    def __init__(self, base_url, user, password, debug=False):
        self.session = requests.Session()
        self.session.auth = (user, password)
        self.base_url = base_url + ("/" if base_url[-1] != "/" else "")
        self.debug = debug
        self.logger = logging.getLogger("API")
        self.logger.setLevel(logging.INFO if debug else logging.WARNING )

    def do_request(self, method, path, query_args, body, error_codes):
        path = urljoin(self.base_url, path[1:])

        if hasattr(body, "asdict"):
            body = body.asdict()
        if isinstance(body, list):
            body = [e.asdict() if hasattr(e, "asdict") else e for e in body]
        if body is not None:
            body = json.dumps(body)

        self.logger.info("Doing request [%s %s]", method, path)
        self.logger.info("Query string: %s", query_args)
        self.logger.info("Body: %s", body)
        ret = self.session.request(method, path, params=query_args, data=body, headers={"Content-type": "application/json"})

        assert ret.status_code in error_codes, "Status code %i not expected %s\n%s" % (ret.status_code, list(error_codes.keys()), ret.content)
        if ret.status_code >= 200 and ret.status_code < 300:
            if len(ret.content) == 0:
                return None
            return ret.json()
        else:
            raise API.Error(ret.status_code, error_codes[ret.status_code])


class Model:
    def asdict(self):
        return {name: (value.asdict() if hasattr(value, "asdict") else value) 
                for name, value in self.__dict__.items() 
                if value is not None and name != "_extra_"
               }

    def __str__(self):
        return "[Model " + type(self).__name__ + "\n" + ("\n".join([str(k) + " = " + indent(str(v), '    ').strip() for k, v in self.__dict__.items()])) + "\n]"

    __repr__ = __str__
